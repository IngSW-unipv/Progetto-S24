@startuml

title Gestione Scuderia MVC - Class Diagram UML

package Controller{
    abstract class AbsController {
        # view : AbsView
        + {abstract} void initialize()
        + {abstract} AbsController.Type getType()
        + AbsView getView()
        + void onLoad()
    }

    enum AbsTypeController {
        LOGIN
        STRATEGIST
        MECHANIC
        WAREHOUSEMAN
    }

    class ControllerFactory{
      + {static}AbsController createController(AbsController.TypeController type)
    }

    class ControllerManager << (S,Violet) singleton >> {
     - instance : ControllerManager
     - frame : Frame
     - currentController : AbsController
     + {static} ControllerManager getInstance()
     + void loadController(AbsController.Type c)
     + void closeWindow()
    }
  
   class LoginController{
     - logv : LoginView
     - void accedi()
     - char[] getPassword()
     - String getUsername()
     + TypeController getType()
     + void initialize()
     + onLoad()
   }

   class WarehousemanController{
     - m : Warehouseman
     - obs : Observable
     - user : Staff
     - String getID()
     + TypeController getType()
     + void initialize()
     + void onLoad()  
   }

   metaclass WhHandler << metaclass >>
   metaclass MechanicHandler << metaclass >>
   metaclass StrategistHandler << metaclass >>
 
  class MechanicController{
    - user : Staff 
    - m : Mechanic
    - boolean getComponent()
    - String getID()
    + TypeController getType()
    + void initialize()
    + void onLoad()
  }
  
  class Observable{
    - observers : List<Observer>
    + void addObserver(Observer observer)
    + void removeObserver(Observer observer)
    + void notifyObservers(int totalRequests)
  }

  class Observer << (I,BLUE) Observer >> {
    + void update(int totalRequest)
  }
 
 
  class StrategistController{
    - user : Staff 
    - st : Strategist
    - minT1 : int 
    - minT2 : int 
    - minT3 : int 
    - timeLap : int 
    - String convertTime(int millis)
    - int getTimeLap()
    - Vehicle getVehicle()
    - void setTimeLap()
    + void createTable(StrategistView sv)
    + TypeController getType() 
    + void initialize()
  }


 ControllerManager --o AbsController : references
 ControllerManager -- ControllerFactory  


 LoginController -up-|> AbsController
 MechanicController -up-|> AbsController
 WarehousemanController -up-|> AbsController

 StrategistController -up-|> AbsController

 MechanicController --o MechanicHandler
 
 WarehousemanController --o WhHandler
 
 StrategistController --o StrategistHandler

 AbsController -up-* AbsTypeController
 AbsController -right-o ControllerFactory
 ControllerManager -left-* AbsTypeController
 WarehousemanController -- Observable : uses
 Observable -down- Observer : uses

}

package View{
    metaclass view << metaclass >>

    abstract class AbsView{
        + void onLoad()
    }
}

AbsView -up-|> JPanel


package Model{

}

package Frame{
  class frame{
    - currentView : AbsView
    + Frame(int w, int h)
    + Dimension getCurrentSize()
    + void loadView(AbsView v)
  }

  frame --o AbsView : contains
  ControllerManager --o frame : has
}



view -.|> Observer

MechanicHandler -up- Model : uses
StrategistHandler -up- Model  : uses
WhHandler -up- Model : uses

WhHandler -- view
MechanicHandler -- view
StrategistHandler -- view

frame -up-|> JFrame

@enduml